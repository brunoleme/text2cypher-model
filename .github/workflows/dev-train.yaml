name: Train on Dev (SageMaker)

on:
  push:
    branches:
      - dev

env:
  IMAGE_TAG: dev-latest
  INFERENCE_IMAGE_TAG: inference-dev-latest
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
  SAGEMAKER_ROLE_ARN: ${{ secrets.SAGEMAKER_ROLE_ARN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
  PREPROCESSING_INSTANCE_TYPE: ml.m5.xlarge
  TRAINING_INSTANCE_TYPE: ml.g4dn.xlarge
  EVALUATION_INSTANCE_TYPE: ml.g4dn.xlarge
  DEPLOYMENT_INSTANCE_TYPE: ml.g4dn.xlarge
  BASE_IMAGE: 763104351884.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/pytorch-inference:2.0.1-gpu-py310-cu118-ubuntu20.04-sagemaker

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.9'
  #     - run: make install
  #     - run: make test ENV=dev

  build-and-push-training:
    runs-on: ubuntu-latest
    # needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build training image
        run: |
          docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG -f Dockerfile.training .
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG

  build-and-push-inference:
    runs-on: ubuntu-latest
    # needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to SageMaker public ECR
        run: |
          aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS \
              --password-stdin 763104351884.dkr.ecr.us-east-1.amazonaws.com

      - name: Build inference image
        run: |
          docker build -t $ECR_REPOSITORY_URI:$INFERENCE_IMAGE_TAG -f Dockerfile.inference .
          docker push $ECR_REPOSITORY_URI:$INFERENCE_IMAGE_TAG

  deploy-lambda:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform-lambda-sagemaker
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up existing Lambda and Role (if any)
        run: |
          aws lambda delete-function --function-name sagemaker-deployer || true
          aws iam delete-role-policy --role-name lambda-sagemaker-role --policy-name lambda-sagemaker-access || true
          aws iam detach-role-policy --role-name lambda-sagemaker-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
          aws iam detach-role-policy --role-name lambda-sagemaker-role --policy-arn arn:aws:iam::aws:policy/AmazonSageMakerFullAccess || true
          aws iam delete-role --role-name lambda-sagemaker-role || true

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

  trigger-sagemaker:
    runs-on: ubuntu-latest
    needs: [build-and-push-training, build-and-push-inference, deploy-lambda]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12 '
      - run: pip install --upgrade 'sagemaker' boto3
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger SageMaker Pipeline
        run: |
          make sagemaker-pipeline-trigger \
            ECR_REPOSITORY_URI=${{ env.ECR_REPOSITORY_URI }} \
            IMAGE_TAG=${{ env.IMAGE_TAG }} \
            INFERENCE_IMAGE_TAG=${{ env.INFERENCE_IMAGE_TAG }} \
            SAGEMAKER_ROLE_ARN=${{ env.SAGEMAKER_ROLE_ARN }} \
            ENV=dev \
            WANDB_API_KEY=${{ env.WANDB_API_KEY }} \
            OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
            PREPROCESSING_INSTANCE_TYPE=${{ env.PREPROCESSING_INSTANCE_TYPE }} \
            TRAINING_INSTANCE_TYPE=${{ env.TRAINING_INSTANCE_TYPE }} \
            EVALUATION_INSTANCE_TYPE=${{ env.EVALUATION_INSTANCE_TYPE }} \
            DEPLOYMENT_INSTANCE_TYPE=${{ env.DEPLOYMENT_INSTANCE_TYPE }} \
            LAMBDA_DEPLOYMENT_ARN=arn:aws:lambda:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:function:sagemaker-deployer

      - name: Output SageMaker Pipeline Execution ARN
        run: echo "Pipeline triggered successfully"
